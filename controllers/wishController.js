const uuid = require('uuid')
const path = require('path')
const {Wish, User, Subscription, List, Reservation} = require('../models/models')
const ApiError = require('../error/ApiError')


class WishController {
    // —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è
    async create(req, res) {

        try {
            const {name, description, img, url, list_id,  user_id} = req.body

            const wish = await Wish.create({
                name, 
                description, 
                img,
                url, 
                // is_reserved, 
                user_id, 
                list_id
            })
            return res.json(wish)
        } catch (error) {
            // next(ApiError.badRequest(message))
            console.error(error);
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏' });
        }
    }


    async getAll(req, res) {
        try {        
            console.log('üì¶ Request query:', req.query);

            const userId = req.query.u
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            const limit = parseInt(req.query.limit) || 6; // –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const page = parseInt(req.query.page) || 1; // –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const offset = (page - 1) * limit; // –°–º–µ—â–µ–Ω–∏–µ
            const sort = req.query.sort || 'createdAt'; // –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'createdAt'
            const order = req.query.order || 'asc'; // –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'asc'
            const search = req.query.q || ''; // –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            // const filter = req.query.filter || 'all'; 
            const scope = req.query.scope || req.query.filter || 'all';   // all | subscriptions
            const status = req.query.status || 'active';
            
            let whereClause = {};
            const { Op } = require('sequelize');
            // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
            if (search) {
                whereClause.name = { [Op.iLike]: `%${search}%` }; // –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—é
            }

            // —Å—Ç–∞—Ç—É—Å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            if (status === 'active') {
            whereClause.completed = false;  // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
            }
    
            // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä 'subscriptions', —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∞–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (scope === 'subscriptions' && userId) {
                try {
                    const subscribedUserIds = await Subscription.findAll({
                        where: { subscriber_id: userId }, // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        attributes: ['subscribed_to_id'], // –¢–æ–ª—å–∫–æ ID –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    }).then(subscriptions => subscriptions.map(sub => sub.subscribed_to_id));
           
                    if (subscribedUserIds.length === 0) {
                        return res.status(200).json([]); // –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
                    }
                    whereClause.user_id = { [Op.in]: subscribedUserIds }; // –£—Å–ª–æ–≤–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
                } catch (err) {
                    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫', error: err.message });
                }
            }
    
            const validSortFields = ['name', 'createdAt'];
            const sortField = validSortFields.includes(sort) ? sort : 'createdAt';

            // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
            const wishes = await Wish.findAll({
                where: whereClause,
                limit,
                offset,
                order: [[sortField, order]],
                include: [
                    {
                        model: User,
                        as: 'user',
                        attributes: ['name', 'img'],
                    },
                    {
                        model: Reservation,
                        as: 'reservation',
                        attributes: ['user_id'],
                    }
                ],
                
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ isReserved
            const wishesWithReserved = wishes.map(wish => {
                const obj = wish.toJSON();
                obj.isReserved = !!obj.reservation;
                return obj;
            });

            return res.status(200).json(wishesWithReserved);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            // return res.status(200).json(wishes);
        } catch (error) {
            console.error('‚ùå Error in /api/wish:', error);
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏–π', error });
        }
    }
    


    // –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserAll(req, res) {
        try {
            const { userId } = req.params;
            const userWishes = await Wish.findAll({
                where: { user_id: userId },
                include: [
                    {
                        model: Reservation,
                        as: 'reservation',
                        attributes: ['user_id']
                    }
                ]
            });

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π wish –≤ –æ–±—ä–µ–∫—Ç —Å isReserved
            const wishesWithReserved = userWishes.map(wish => {
                const obj = wish.toJSON();
                obj.isReserved = !!obj.reservation;
                return obj;
            });

            return res.status(200).json(wishesWithReserved);
        } catch (error) {
            return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error });
        }
    }

    //–ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –ø–æ –µ–≥–æ ID
    async getOne(req, res) {
        try {
            const { id } = req.params;
            const wish = await Wish.findOne({
                where: { id },
                include: [
                    { 
                        model: User,
                        as: 'user', // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–µ–π –≤ –º–æ–¥–µ–ª–∏
                        attributes: ['name', 'img'], // –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã
                    },
                    {
                        model: List,
                        as: 'list',
                        attributes: ['id', 'name'], // ‚¨ÖÔ∏è –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ
                    },
                    {
                        model: Reservation,
                        as: 'reservation',
                        attributes: ['id', 'user_id'], // ‚¨ÖÔ∏è –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ
                    },
                ]
            });
            if (!wish) {
                return res.status(404).json({ message: '–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
            }
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º isReserved
            const wishObj = wish.toJSON();
            wishObj.isReserved = !!wishObj.reservation;

            return res.status(200).json(wishObj);
            // return res.status(200).json(wish);
        } catch (error) {
            return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è', error });
        }
    }

    async getWishesByListId(req, res, next) {
        try {
            const { listId } = req.params;

            const wishes = await Wish.findAll({
                where: { list_id: listId },
                include: [
                    {
                        model: User,
                        as: 'user', // –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–≤—è–∑—å
                        attributes: ['id', 'name', 'img'],
                    },
                    {   
                        model: Reservation, 
                        as: 'reservation', 
                        attributes: ['id', 'user_id'] 
                    },
                ],
                order: [['createdAt', 'ASC']], // –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            });

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º isReserved
            const formattedWishes = wishes.map(w => {
                const wishObj = w.toJSON();
                wishObj.isReserved = !!wishObj.reservation;
                return wishObj;
            });
            return res.json(formattedWishes);
            // return res.json(wishes);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å–ø–∏—Å–∫–∞:', error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å–ø–∏—Å–∫–∞' });
        }
    }

    async update(req, res) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º ID –∂–µ–ª–∞–Ω–∏—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            const { id } = req.params;
            // const { name, img, url, is_reserved } = req.body;
            const { name, img, url, is_reserved, description, list_id, user_id } = req.body;
    
            // –ò—â–µ–º –∂–µ–ª–∞–Ω–∏–µ –ø–æ ID
            const wish = await Wish.findByPk(id);
            if (!wish) {
                return res.status(404).json({ message: '–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
            }
    
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è
            await wish.update({
                name,
                img,
                url,
                is_reserved,
                description,
                list_id,
                // user_id,
            });
    
            return res.status(200).json({
                message: '–ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
                wish,
            });
        } catch (error) {
            return res.status(500).json({
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è',
                error,
            });
        }
    }

    // —É–¥–∞–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è
    async delete(req, res) {
        try {
            const { id } = req.params;
            console.log('–£–¥–∞–ª—è–µ–º –∂–µ–ª–∞–Ω–∏–µ —Å ID:', id);
            const wish = await Wish.findOne({ where: { id } });
            if (!wish) {
                return res.status(404).json({ message: '–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
            }
            await wish.destroy();
            return res.status(200).json({ message: '–ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ' });
        } catch (error) {
            return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è', error });
        }
    }



    async setCompleted(req, res) {
        try {
          const { id } = req.params;
          const { completed } = req.body; // boolean
    
          const wish = await Wish.findByPk(id);
          if (!wish) return res.status(404).json({ message: '–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    
          wish.completed = Boolean(completed);
          await wish.save();
    
          return res.json(wish); // –≤–µ—Ä–Ω—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ completed:', e);
          return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
      }

}

module.exports = new WishController()