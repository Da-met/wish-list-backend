const { Reservation, Wish, User } = require('../models/models')



class ReservationController {
    // –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async reserve(req, res) {
        const { wishId } = req.body;
        const userId = req.user.id;


        try {
            const wish = await Wish.findByPk(wishId);
            if (!wish) return res.status(404).json({ error: '–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            // if (wish.is_reserved) return res.status(400).json({ error: '–ü–æ–¥–∞—Ä–æ–∫ —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω' });
        
            const existing = await Reservation.findOne({
                where: { wish_id: wishId, user_id: userId }
            });
            if (existing) {
                return res.status(400).json({ error: '–í—ã —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫' });
            }
    
            const reservation = await Reservation.create({ wish_id: wishId, user_id: userId });
            await wish.update({ is_reserved: true });
    
            res.status(201).json({ message: '–ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω', reservation });

        } catch (error) {
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞' });
        }
    }

    // –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é –∂–µ–ª–∞–Ω–∏—è
    async unreserve(req, res) {
        const userId = req.user.id;
        const { wishId } = req.body;

    
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è
            const reservation = await Reservation.findOne({
                where: { wish_id: wishId, user_id: userId }
            });
            if (!reservation) {
                return res.status(404).json({ error: '–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }
            // –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
            await reservation.destroy();
        
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ is_reserved –≤ —Ç–∞–±–ª–∏—Ü–µ Wish
            await Wish.update({ is_reserved: false }, { where: { id: wishId } });
        
            res.status(200).json({ message: '–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞' });
        } catch (error) {
            console.error(error);
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏' });
        }
    }


    // –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    async getReservationsByUser(req, res) {
        const userId = req.user.id;

        try {
            const reservations = await Reservation.findAll({
                where: { user_id: userId },
                include: [{ 
                    model: Wish, 
                    as: 'wish',
                    include: [{
                        model: User,
                        as: 'user', // üëà –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∞–ª–∏–∞—Å
                        attributes: ['id', 'name', 'img'] // —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å
                      }]
                }]
            });
        
            return res.status(200).json(reservations);
        } catch (error) {
            console.error(error);
            return res.status(500).json({ error: 'Failed to fetch reservations' });
        }
    }
}

module.exports = new ReservationController()